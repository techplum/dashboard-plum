import { supabaseOptimizer } from '../../utils/supabase-optimizer';
import { supabaseCache } from '../../utils/supabase-cache';
import { Public_profile } from '../../types/public_profileTypes';

/**
 * Service optimis√© pour les clients
 */
export class OptimizedCustomerService {
  private static instance: OptimizedCustomerService;
  private cache = supabaseCache;
  private optimizer = supabaseOptimizer;

  static getInstance(): OptimizedCustomerService {
    if (!OptimizedCustomerService.instance) {
      OptimizedCustomerService.instance = new OptimizedCustomerService();
    }
    return OptimizedCustomerService.instance;
  }

  /**
   * R√©cup√®re tous les clients avec cache intelligent
   */
  async getAllCustomers(forceRefresh = false): Promise<Public_profile[]> {
    console.group('üîç [Optimized] getAllCustomers');
    console.log('Force refresh:', forceRefresh);

    // V√©rifier si on a besoin de rafra√Æchir
    if (!forceRefresh) {
      const lastFetch = this.getLastFetchTime();
      const timeSinceLastFetch = Date.now() - lastFetch;
      
      // Si moins de 3 minutes se sont √©coul√©es, utiliser le cache
      if (timeSinceLastFetch < 3 * 60 * 1000) {
        console.log('‚úÖ Utilisation du cache (derni√®re mise √† jour il y a', Math.round(timeSinceLastFetch / 1000), 'secondes)');
        console.groupEnd();
        return this.getCachedCustomers();
      }
    }

    try {
      const result = await this.optimizer.query<Public_profile[]>('public_profile', {
        filters: { is_fliiinker: false },
        orderBy: { column: 'created_at', ascending: false },
        useCache: true,
        cacheTTL: 5 * 60 * 1000 // 5 minutes
      });

      this.setLastFetchTime();
      console.log('‚úÖ Donn√©es r√©cup√©r√©es:', result.data.length, 'clients');
      console.groupEnd();
      
      return result.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des clients:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * R√©cup√®re un client par ID avec cache
   */
  async getCustomerById(customerId: string): Promise<Public_profile | null> {
    console.group('üîç [Optimized] getCustomerById');
    console.log('Customer ID:', customerId);

    try {
      const result = await this.optimizer.query<Public_profile[]>('public_profile', {
        filters: { id: customerId, is_fliiinker: false },
        useCache: true,
        cacheTTL: 10 * 60 * 1000 // 10 minutes pour les d√©tails
      });

      console.log('‚úÖ Client r√©cup√©r√©');
      console.groupEnd();
      
      return result.data[0] || null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du client:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * R√©cup√®re les clients avec pagination optimis√©e
   */
  async getCustomersPaginated(
    page: number,
    pageSize: number,
    filters: Record<string, any> = {}
  ): Promise<{ data: Public_profile[]; total: number; page: number; totalPages: number }> {
    console.group('üîç [Optimized] getCustomersPaginated');
    console.log('Page:', page, 'PageSize:', pageSize, 'Filters:', filters);

    try {
      const result = await this.optimizer.queryPaginated<Public_profile[]>('public_profile', page, pageSize, {
        filters: { ...filters, is_fliiinker: false },
        orderBy: { column: 'created_at', ascending: false },
        useCache: true,
        cacheTTL: 3 * 60 * 1000 // 3 minutes pour la pagination
      });

      console.log('‚úÖ Donn√©es pagin√©es r√©cup√©r√©es:', result.data.length, 'clients');
      console.groupEnd();
      
      return result;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des clients pagin√©s:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * Recherche optimis√©e de clients
   */
  async searchCustomers(searchTerm: string, limit = 20): Promise<Public_profile[]> {
    console.group('üîç [Optimized] searchCustomers');
    console.log('Search term:', searchTerm, 'Limit:', limit);

    if (!searchTerm.trim()) {
      console.log('‚è≠Ô∏è Terme de recherche vide, retour vide');
      console.groupEnd();
      return [];
    }

    try {
      // Recherche par nom ou email
      const result = await this.optimizer.query<Public_profile[]>('public_profile', {
        filters: { 
          is_fliiinker: false,
          // Note: Pour une vraie recherche textuelle, il faudrait utiliser full-text search
          // ou faire une recherche c√¥t√© client
        },
        limit,
        useCache: false, // Pas de cache pour les recherches
        orderBy: { column: 'created_at', ascending: false }
      });

      // Filtrer c√¥t√© client pour la recherche textuelle
      const filteredData = result.data.filter(customer => 
        customer.first_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        customer.last_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        customer.email?.toLowerCase().includes(searchTerm.toLowerCase())
      );

      console.log('‚úÖ R√©sultats de recherche:', filteredData.length);
      console.groupEnd();
      
      return filteredData;
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * R√©cup√®re les statistiques des clients
   */
  async getCustomerStats(): Promise<{
    total: number;
    active: number;
    recent: number;
    byLocation: Record<string, number>;
  }> {
    console.group('üîç [Optimized] getCustomerStats');

    try {
      // Utiliser des requ√™tes parall√®les pour optimiser
      const [totalResult, recentResult] = await Promise.all([
        this.optimizer.getCount('public_profile', { is_fliiinker: false }),
        this.optimizer.getCount('public_profile', {
          is_fliiinker: false,
          created_at: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // 30 jours
        })
      ]);

      // R√©cup√©rer les clients actifs (avec des commandes r√©centes)
      const activeResult = await this.optimizer.getCount('public_profile', {
        is_fliiinker: false,
        // Note: Il faudrait une jointure avec les commandes pour un vrai comptage actif
      });

      const stats = {
        total: totalResult,
        active: activeResult,
        recent: recentResult,
        byLocation: {} // √Ä impl√©menter si n√©cessaire
      };

      console.log('‚úÖ Statistiques r√©cup√©r√©es:', stats);
      console.groupEnd();
      
      return stats;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * R√©cup√®re les clients par localisation
   */
  async getCustomersByLocation(location: string): Promise<Public_profile[]> {
    console.group('üîç [Optimized] getCustomersByLocation');
    console.log('Location:', location);

    try {
      const result = await this.optimizer.query<Public_profile[]>('public_profile', {
        filters: { 
          is_fliiinker: false,
          address: location // Note: Cela d√©pend de la structure de vos donn√©es
        },
        orderBy: { column: 'created_at', ascending: false },
        useCache: true,
        cacheTTL: 5 * 60 * 1000
      });

      console.log('‚úÖ Clients par localisation r√©cup√©r√©s:', result.data.length);
      console.groupEnd();
      
      return result.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des clients par localisation:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * R√©cup√®re les clients r√©cents
   */
  async getRecentCustomers(limit = 10): Promise<Public_profile[]> {
    console.group('üîç [Optimized] getRecentCustomers');
    console.log('Limit:', limit);

    try {
      const result = await this.optimizer.query<Public_profile[]>('public_profile', {
        filters: { is_fliiinker: false },
        orderBy: { column: 'created_at', ascending: false },
        limit,
        useCache: true,
        cacheTTL: 2 * 60 * 1000 // 2 minutes pour les donn√©es r√©centes
      });

      console.log('‚úÖ Clients r√©cents r√©cup√©r√©s:', result.data.length);
      console.groupEnd();
      
      return result.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des clients r√©cents:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * V√©rifie si un client existe
   */
  async customerExists(customerId: string): Promise<boolean> {
    console.group('üîç [Optimized] customerExists');
    console.log('Customer ID:', customerId);

    try {
      const count = await this.optimizer.getCount('public_profile', {
        id: customerId,
        is_fliiinker: false
      });

      const exists = count > 0;
      console.log('‚úÖ V√©rification existence:', exists);
      console.groupEnd();
      
      return exists;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification d\'existence:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * Invalide le cache des clients
   */
  invalidateCache(): void {
    this.optimizer.invalidateCache('public_profile');
    this.clearLastFetchTimes();
    console.log('üóëÔ∏è Cache des clients invalid√©');
  }

  // M√©thodes priv√©es pour la gestion du cache local
  private getLastFetchTime(): number {
    return parseInt(localStorage.getItem('customers_last_fetch') || '0');
  }

  private setLastFetchTime(): void {
    localStorage.setItem('customers_last_fetch', Date.now().toString());
  }

  private clearLastFetchTimes(): void {
    localStorage.removeItem('customers_last_fetch');
  }

  private getCachedCustomers(): Public_profile[] {
    // Cette m√©thode devrait r√©cup√©rer les donn√©es du cache Redux ou local
    // Pour l'instant, on retourne un tableau vide
    return [];
  }
}

// Instance singleton
export const optimizedCustomerService = OptimizedCustomerService.getInstance();