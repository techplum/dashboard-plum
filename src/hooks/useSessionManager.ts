import { useEffect, useRef } from 'react';
import { supabaseClient } from '../utility/supabaseClient';

interface UseSessionManagerProps {
  maxSessionHours?: number; // Dur√©e maximale de session (d√©faut: 8h)
  refreshIntervalMinutes?: number; // Intervalle de v√©rification (d√©faut: 5 min)
  forceLogoutOnExpiry?: boolean; // Logout forc√© √† l'expiration (d√©faut: true)
}

export const useSessionManager = ({
  maxSessionHours = 8,
  refreshIntervalMinutes = 5,
  forceLogoutOnExpiry = true,
}: UseSessionManagerProps = {}) => {
  // Fonction de logout directe via Supabase
  const performLogout = async () => {
    try {
      console.log('üîì D√©connexion de session en cours...');
      const { error } = await supabaseClient.auth.signOut();
      
      if (error) {
        console.error('Erreur lors de la d√©connexion:', error);
      } else {
        console.log('‚úÖ D√©connexion de session r√©ussie');
        // Rediriger vers la page de login
        window.location.href = '/login';
      }
    } catch (error) {
      console.error('Erreur inattendue lors de la d√©connexion de session:', error);
      // En cas d'erreur, forcer la redirection
      window.location.href = '/login';
    }
  };
  const sessionStartRef = useRef<number>(Date.now());
  const checkIntervalRef = useRef<NodeJS.Timeout>();

  // R√©cup√©rer ou initialiser le timestamp de d√©but de session
  const getSessionStart = (): number => {
    const stored = localStorage.getItem('session_start_time');
    if (stored) {
      return parseInt(stored);
    }
    
    // Premi√®re connexion
    const now = Date.now();
    sessionStartRef.current = now;
    localStorage.setItem('session_start_time', now.toString());
    return now;
  };

  // V√©rifier la validit√© de la session
  const checkSessionValidity = async () => {
    try {
      const { data: { session }, error } = await supabaseClient.auth.getSession();
      
      if (error || !session) {
        console.log('üîê Session invalide d√©tect√©e');
        return false;
      }

      const sessionStart = getSessionStart();
      const sessionDurationHours = (Date.now() - sessionStart) / (1000 * 60 * 60);
      
      console.log(`‚è±Ô∏è Dur√©e de session actuelle: ${sessionDurationHours.toFixed(1)}h`);

      // V√©rifier si la session a d√©pass√© la limite
      if (sessionDurationHours >= maxSessionHours) {
        console.log(`üö´ Session expir√©e apr√®s ${sessionDurationHours.toFixed(1)}h`);
        
        if (forceLogoutOnExpiry) {
          // Nettoyer les donn√©es de session
          localStorage.removeItem('session_start_time');
          localStorage.removeItem('last_activity');
          
          // Notification utilisateur
          if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('Session expir√©e', {
              body: `Votre session a expir√© apr√®s ${maxSessionHours}h pour votre s√©curit√©`,
              icon: '/favicon.ico'
            });
          }

          performLogout();
          return false;
        }
      }

      // V√©rifier l'expiration du token lui-m√™me
      const tokenExp = session.expires_at ? session.expires_at * 1000 : 0;
      const timeUntilExpiry = tokenExp - Date.now();
      
      if (timeUntilExpiry < 5 * 60 * 1000) { // Moins de 5 min
        console.log('üîÑ Token proche de l\'expiration, tentative de refresh...');
        
        const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();
        
        if (refreshError) {
          console.error('‚ùå √âchec du refresh du token:', refreshError);
          performLogout();
          return false;
        }
        
        console.log('‚úÖ Token refresh√© avec succ√®s');
      }

      return true;
    } catch (error) {
      console.error('Erreur lors de la v√©rification de session:', error);
      return false;
    }
  };

  // Obtenir les infos de session actuelles
  const getSessionInfo = () => {
    const sessionStart = getSessionStart();
    const sessionDurationHours = (Date.now() - sessionStart) / (1000 * 60 * 60);
    const remainingHours = Math.max(0, maxSessionHours - sessionDurationHours);
    
    return {
      sessionDurationHours: parseFloat(sessionDurationHours.toFixed(1)),
      remainingHours: parseFloat(remainingHours.toFixed(1)),
      isExpired: sessionDurationHours >= maxSessionHours,
    };
  };

  // R√©initialiser la session (nouveau login)
  const resetSession = () => {
    const now = Date.now();
    sessionStartRef.current = now;
    localStorage.setItem('session_start_time', now.toString());
    console.log('üîÑ Session r√©initialis√©e');
  };

  useEffect(() => {
    // Initialiser la session
    getSessionStart();
    
    // V√©rification p√©riodique
    checkIntervalRef.current = setInterval(
      checkSessionValidity, 
      refreshIntervalMinutes * 60 * 1000
    );

    // V√©rification imm√©diate
    checkSessionValidity();

    // √âcouter les changements d'auth state
    const { data: { subscription } } = supabaseClient.auth.onAuthStateChange(
      (event, session) => {
        if (event === 'SIGNED_IN' && session) {
          resetSession();
        } else if (event === 'SIGNED_OUT') {
          localStorage.removeItem('session_start_time');
        }
      }
    );

    // Cleanup
    return () => {
      if (checkIntervalRef.current) {
        clearInterval(checkIntervalRef.current);
      }
      subscription.unsubscribe();
    };
  }, [maxSessionHours, refreshIntervalMinutes]);

  return {
    checkSessionValidity,
    getSessionInfo,
    resetSession,
  };
};